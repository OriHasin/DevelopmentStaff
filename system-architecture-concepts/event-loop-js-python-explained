Event Loop Internals: JavaScript & Python
=========================================

Synchronous code executes each line sequentially, waiting for each to finish before moving on,
while asynchronous code can start an operation and move on to the next without waiting for the previous one to complete.
Synchronous operations are therefore blocking, while asynchronous operations are non-blocking.



Core Concepts
--------------
- **Single-Threaded Execution**: Both JavaScript and Python (when using asyncio) primarily operate within a single-threaded environment.
This means they execute one piece of code at a time, from the call stack, relying on an event loop to handle asynchronous operations.

- **Non-Blocking Asynchronicity**: The event loop allows for non-blocking asynchronous operations, so the main thread isn't held up waiting for I/O or other time-consuming tasks.
Instead, these operations are managed concurrently by other mechanisms, with their results managed by the event loop.



JavaScript Event Loop
---------------------
- **Call Stack**: The call stack executes synchronous code.

- **Web APIs**: The browser / Node.JS provides Web APIs  (e.g., setTimeout, fetch, DOM events) to handle asynchronous operations.
These APIs are not part of the JavaScript engine itself. When an asynchronous operation starts, the Web API takes over.

- **Callback/Task Queue**: When an asynchronous operation completes, its corresponding callback is placed in the callback queue
(also known as the task queue).

- **Microtask Queue**: JavaScript also uses a microtask queue for higher-priority tasks like promise resolutions.

- **Event Loop**: The event loop monitors the call stack and the queues. If the call stack is empty,
the event loop first checks the microtask queue, moving any ready microtasks to the call stack. If the microtask queue is empty,
it moves the first task from the task queue to the call stack for execution. This process is continuous.

- **Promises and Event Loop**: Promises are managed by the microtask queue. When a promise resolves or rejects,
its then() or catch() callbacks are added to the microtask queue. The event loop will process the microtask queue before moving to the task queue.

- **async/await**: Javascript's async functions return a Promise. The await keyword pauses the execution of the async function until the Promise resolves or rejects.
Behind the scenes, JavaScript's async/await uses the same event loop and callback queue mechanisms.
When an await is encountered, The async function's execution is paused, and control returns to the event loop.
The Promise associated with the await starts executing (if it hasn't already).
Once the Promise settles, the remainder of the async function (the continuation) is scheduled as a microtask (higher priority than regular tasks).


JavaScript relies on Web APIs or C++ APIs in Node.js to manage asynchronous operations.
These APIs handle tasks like timers, network requests, and DOM events, and they place callbacks in the task queue when operations are complete.




Python Asyncio Event Loop
-------------------------
- **Call Stack**: Executes synchronous code and manages the execution of coroutines when they are run.

- **Coroutines**: Python's asyncio uses coroutines (defined with `async def`) as the basic units of asynchronous programming.
These coroutines are paused and resumed at specific await points, allowing other tasks to run.

- **Task**: A coroutine wrapped in a Task object using `asyncio.create_task()` is scheduled to run by the event loop.
Tasks represent units of work that are tracked and managed by the event loop. Tasks have states like PENDING (running / waiting), CANCELED, or FINISHED

- **Ready Queue**: The event loop maintains a ready queue, which contains tasks that are ready to execute immediately.
Tasks in this queue are moved to the call stack for execution.

- **Microtasks**: Similar to JavaScript, asyncio can execute small tasks (like callbacks or future completions) as part of its loop.
These are handled before returning to the main ready queue.

- **Event Loop**: The event loop is the central orchestrator of asyncio.
It continuously:
    - Executes tasks from the ready queue.
    - Monitors external events (like I/O, timers, etc.).
    - Schedules the execution or resumption of coroutines based on completed I/O or other events.

- **Await Points**: When a coroutine encounters an `await`, it suspends execution at that point.
The event loop marks the coroutine as "waiting" and resumes other tasks.
When the awaited condition is satisfied, the coroutine is moved back to the ready queue for execution.

- **Timers and I/O**: Timers (e.g., `await asyncio.sleep()`) and I/O operations are managed by the event loop.
The event loop leverages the operating system's capabilities (via libraries like `select` or `epoll`) for efficient monitoring.

- **Cooperative Multitasking**: asyncio relies on cooperative multitasking, meaning that tasks voluntarily yield control at `await` points.
This allows other tasks to execute without preemption.






JavaScript's Async Execution and Web APIs
----------------------------------------------
In JavaScript, async functions rely on the event loop and Web APIs (in browsers) or similar mechanisms (in Node.js) to handle asynchronous operations.

When an async function encounters an await, the following happens:

1. The async operation (like setTimeout, fetch, etc.) is delegated to the Web API.
2. The function itself doesn't block the main thread. The synchronous part of the function runs entirely before it "pauses" at the await.
3. The async operation runs in the background (handled by Web APIs).
4. Once the operation completes, the function's continuation (from after the await) is scheduled back on the event loop as a microtask.
5. Since JavaScript async functions rely on external systems (Web APIs or Node.js equivalents), the function doesn't remain in the call stack after it hits await. It gets removed and will resume later when the promise resolves.

Python's Async Execution
-----------------------------------------------
In Python, asynchronous programming with asyncio is different because there are no Web APIs. Everything is handled by Python's event loop internally.

When an await is encountered in Python:

1. The coroutine is suspended at the await.
2. The control is handed back to the event loop, allowing it to execute other coroutines or tasks.
3. The suspended coroutine is stored in memory (not on the call stack) and will resume when the awaited operation is complete.
4. Unlike JavaScript, Python removes the coroutine from the call stack when it suspends. This is because Python's event loop directly manages async execution, whereas JavaScript offloads the async operation to Web APIs.

Type of communication between microservices:


    - Synchronous communication (request-response based):
        In this pattern, one microservice sends a request to another microservice and waits for a response.
        Suitable for use cases where an immediate response is needed, such as authenticating a user, validating a transaction, etc.
        useful for cases when we need to get an immediate response and we want to block the processing until response has arrived.
        (for example, we dont want to continue processing before authenticate the user).

        Examples: REST API over HTTPS, gRPC, GraphQL



    - Asynchronous communication (message based):
        In this pattern, one microservice sends a message to another service or to a message broker, which ensures that
        the message is delivered even if the target service is temporarily unavailable.
        Useful for real-time processing, event-driven architectures, and loosely coupled services.
        Especially effective for high-scale, low-latency systems where microservices need to process events without blocking.

        Examples: Message queues (e.g., Kafka, RabbitMQ), Pub/Sub systems (e.g., AWS SNS/SQS, Google Pub/Sub)

        Use Case: Event Streaming: Can use Kafka to listen to events from chat messages.
        If a suspicious message is detected, an alert can be triggered (event to another topic) and processed independently.



    - Efficient communication: Protocols & Formats:
        Binary Protocols for High Throughput: While REST is based on HTTP, using binary protocols like gRPC for
        microservices communication. It’s more efficient, especially when need low-latency communication.

        Data Serialization: Protobuf (Protocol Buffers) or Avro for efficient data serialization.
        JSON is more human-readable but less efficient for large-scale systems.


Differences between Async & Sync Communications:

    Synchronous communication is when the caller sends a request and waits for an immediate response before proceeding, like in REST APIs.
    Asynchronous communication is when the caller sends a request but doesn’t wait for a response, allowing both parties to operate independently,
    often using message brokers like Kafka.

    You should use synchronous communication when you need immediate feedback, such as in user-facing actions like authentication or payment processing.
    Asynchronous communication is better for decoupled systems or long-running tasks, like sending emails or processing large datasets,
    where immediate responses aren’t critical and scalability is important.



    Synchronous Communication

        Advantages:
            Simplicity: Easier to implement and debug due to the straightforward request-response model.
            Real-Time Feedback: Immediate responses allow for quick error handling and validation.
            Predictable Flow: Ideal for tightly coupled systems where services need to coordinate closely.

        Limitations:
            Tight Coupling: Services are directly dependent on each other, making changes harder to isolate.
            Scalability Challenges: Requires maintaining open connections, which can become resource-intensive under high traffic.
            Timeouts and Failures: If the downstream service is slow or unavailable, the caller might face delays.
            Network Dependency: Requires a stable and reliable network for consistent performance.

    Asynchronous Communication

        Advantages:
            Decoupling: Services operate independently, reducing dependencies and enabling parallel development.
            Scalability: Can handle large workloads by distributing tasks via queues or brokers.
            Fault Tolerance: Failures in one service don’t immediately impact others, as messages can be retried or stored until the consumer is ready.
            Flexibility: Multiple services can consume the same message or event, supporting extensibility in event-driven architectures.

        Limitations:
            Increased Complexity: Requires message brokers, additional infrastructure, and mechanisms to ensure delivery, ordering, and idempotency.
            Debugging Challenges: Tracing the flow of messages through multiple services can be harder, requiring robust logging and monitoring.




Important Services:

    - API Gateway:
        An API Gateway acts as a single entry point for all external communication. It routes requests to the appropriate microservice.
        Responsibilities:
            Load Balancing: Distributes requests evenly across multiple instances of microservices.
            Authentication: Manages authentication centrally (validate JWT tokens or sessions ID), rather than each service implementing its own.
            Rate Limiting: Ensures that a single client cannot overwhelm the system by limiting the number of requests.

        Examples: Nginx, Apache HTTP Server, AWS API Gateway


    - User Management Service:
        Manages users, handles the login process, generates tokens, and controls session data. this service will implement the ORM or ODM classes.
        Responsibilities:
            Manages user profiles - Handles user registration, updates to profile information, and account deletions.
            Authentication - Validates user credentials when they log in, issues authentication tokens (e.g., JWT tokens) upon successful login.
            Session Management - Keeps track of user sessions and ensures session continuity, manages refresh tokens.









